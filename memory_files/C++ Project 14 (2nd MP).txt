C++ Project 14
1 point

Goal:
1. Learn how to declare and initialize arrays on one line.
2. Learn how to print the contents of an array.

To get started:
To create a new project, click Create a new project. Then click Empty Project. Click Next

For the Project name, type Prog14. Click the 3 dots (...) for the location. Select the Prog14 folder you created above. No other options need to be changed for now. Click Create.

If an advertising window appears, click the little X at the top left.

To add a file (a class), right click on Source files. Go to Add → New Item…
Type Prog14 for the file name. NO SPACES. Click Add.

An array is a collection of elements of the same data type that is stored as a single variable, and can be referenced (accessed) by that variable and indices.

The syntax for declaring an array is:
type var [num_elements];

Here, type represents a certain data type, var represents the name, and num_elements represents the number of elements the array will hold. It is required that the number of elements is known before declaring or initializing an array.

Arrays are typically declared on one line and initialized through a loop, but this project will focus on arrays being declared and initialized on one line.

Arrays can be of any type we’ve learned so far.

For example:
int arr [5];
will declare an array of type int with 5 elements.

We can assign values to each of the 5 positions in the following way:
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
arr[3] = 4;
arr[4] = 5;
This isn’t particularly useful as arrays with large numbers of elements will be tedious and unwieldy to write on consecutive lines like this. It is also very important to note that the indices of arrays start at 0. They do not start at 1.

Unfortunately, in C++, there is no convenient way of printing out the values of the array to the screen. To do this, we will use a loop (preferably a for loop).

For example, to print the above array, you can use the following syntax:
for (int i = 0; i < 5; i++)
   cout << arr[i] << endl;

If you wanted the values on one line separated by a tab, you could have written:
for (int i = 0; i < 5; i++)
   cout << arr[i] << "\t";
cout << endl;

If you tried printing the array object out to the screen directly, you would get a memory address location:
cout << arr << endl;
// 0000005976D2F758 is displayed to the screen.

This is extremely unhelpful as I simply just wanted the numbers 1 - 5 printed.

You could have also printed out the values individually, but again, this is rather tedious:
cout << arr[0] << endl;
cout << arr[1] << endl;
cout << arr[2] << endl;
cout << arr[3] << endl;
cout << arr[4] << endl;

The original array could also have been declared on one line as follows:
int arr [] = {1, 2, 3, 4, 5};

This is a much more convenient way to initialize an array, but again, if the array had thousands upon thousands of elements, or even higher numbers, writing an array with all the values would be very error prone and tiring. 

Assuming an array is given (existing), but the size is unknown, we have a way to find the number of elements in the array. We can use the sizeof(arr) and sizeof(type) functions.

For example,
If we had an array:
int arr2 [] = {5, 4, 3, 2, 1, 2, 3, 4, 5};


We can find exactly how many elements are inside of it using the following syntax. We just need to know the type of the array.

Consider the following:
int totalbytes = sizeof(arr2);
cout << totalbytes << endl;
This will tell me the total number of bytes of an array. It will print out 36 since there are 9 elements and each element is an int data type and each int is 4 bytes in memory.

We also have a way to find the size of the int data type:
int size = sizeof(int);
cout << size << endl;
Here, 4 will be printed out as expected.

Therefore, we can find the length of the array (number of elements), by using the following syntax:
int length = sizeof(arr2) / sizeof(int);
cout << length << endl;

Now, 9 is printed out to the screen.

We can use loops to print out arrays as described above, but we no longer have to type the actual number in to specify the index to count up to. We can use this syntax.

for (int i = 0; i < sizeof(arr2) / sizeof(int); i++)
   cout << arr2[i] << endl;

This is the preferred way to print out arrays to the screen.

If you wanted each element separated by a tab, use this syntax:
for (int i = 0; i < sizeof(arr2) / sizeof(int); i++)
   cout << arr2[i] << "\t";
cout << endl;











I have created my own function for printing out arrays in a much nicer way:
void printIntArr(int a[], int length)
{
	string s = "[";

	if (length >= 2)
	{
		for (int i = 0; i < length - 1; i++)
			s += to_string(a[i]) + ", ";
		s += to_string(a[length - 1]) + "]";
	}
	else if (length == 1)
	{
		s += to_string(a[0]) + "]";
	}
	else
		s = "[]";

	cout << s << endl;
}

You might see errors for to_string(var). Be sure to include on line 2 of your program:
#include <string>.

You can paste this method in your program and print the arrays nicely by calling this function. Make sure you realize that it takes 2 parameters, the array itself and the length of the array.

Try it out.

You can modify these functions so they work with each of the 5 primitive types and strings.

You are required to know how to print the arrays out in the way described earlier in this project (not using my algorithm).

You are to do the following:
1. Create the following array on one line:
[4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 7, 8, 9, 3, 2, 1, 5, 6, 9, 3, 1, -3, 2, 6, 8, 2, 3, 6, 1, 7]
2. Print this array to the screen in a nice format.
3. Use my algorithm to print this array to the screen.
4. Create the following array on one line:
[true, false, true, true, true, false, false, true, false, true, true, false, false, true, true, true, false]
5. Print this array to the screen in a nice format.
6. Use my algorithm to print this array to the screen.
7. Use multiple lines to create the following array:
[1.3, 2.1, -7.3, 8.4, 10.1, -8.2]
8. Print the third element to the screen.
9. Use my algorithm to print the array to the screen.
10. Create the following array on one line:
["apple", "banana", "cat", "dog", "evergreen", "function", "giraffe", "hogwash", "igloo", "jump", "kite", "llama", "mushroom", "nested", "opaque", "push", "quarry", "roadrunner", "staple", "tenant", "under", "vertigo", "walker", "xylophone", "yellow", "zebra"]
11. Print this array to the screen in a nice format.
12. Use my algorithm to print this array to the screen.

