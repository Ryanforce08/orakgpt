C++ Project 16
2 points

Goal:
1. Learn how two-dimensional arrays work.
2. Learn how to load and print contents of a 2-D array.

To get started:
To create a new project, click Create a new project. Then click Empty Project. Click Next

For the Project name, type Prog16. Click the 3 dots (...) for the location. Select the Prog16 folder you created above. No other options need to be changed for now. Click Create.

If an advertising window appears, click the little X at the top left.

To add a file (a class), right click on Source files. Go to Add → New Item…
Type Prog16 for the file name. NO SPACES. Click Add.

You’ve learned how to declare, initialize, load, and print one-dimensional arrays. Now you will learn about two-dimensional arrays (2D arrays).

First, understand that a 2D array is an array of arrays. That is, every element of a 2D array is an array itself.

Just like a 1D array, a 2D array can be declared and initialized on one line, on multiple lines, and by a loop.

For example, if we have the code:
int arr2D[3][2] = {{1, 2}, {3, 4}, {5, 6}};

This 2D array has been declared and initialized on one line. Here, there are 3 elements of arr2D. Each of the 3 elements are arrays themselves. Each element is an array of 2 elements. This means that:
arr2D[0] = [1, 2]
arr2D[1] = [3, 4]
arr2D[2] = [5, 6]

Just like 1D arrays, 2D arrays cannot be printed directly to the screen. You either need to print out the elements one by one on separate lines, or preferably, use a loop.

It’s best to use a 2D array when you have a grid or a table of elements. You can think of rows as the first index and columns as the second index.



For example, we can access all 6 values in the following way:
arr2D[0][0] = 1
arr2D[0][1] = 2
arr2D[1][0] = 3
arr2D[1][1] = 4
arr2D[2][0] = 5
arr2D[2][1] = 6

You can think of this as 3 rows and 2 columns. You can even print the array out like this. In fact, you should print the array out like this.

for (int i = 0; i < sizeof(arr2D) / sizeof(arr2D[i]); i++)
{
    for (int j = 0; j < sizeof(arr2D[i]) / sizeof(int); j++)
        cout << arr2D[i][j] << "\t";
    cout << endl;
}

This is the standard way to print out a 2D array. Always. Just make sure the types of the 2D array are correct. Since we have an int[][] 2D array, the outer for loop must determine how many elements it has. The code: sizeof(arr2D) / sizeof(arr2D[i]) determines the number of elements the 2D array has. The code: sizeof(arr2D[i]) / sizeof(int) determines how many elements each element has. Here, there are 3 rows and 2 columns. Combined, the loops iterate a total of 6 times because there are 6 values in the 2D array, which makes sense - 3 for the outer loop, and 2 for the inner loop. 3x2 = 6.

Just remember that the variable i represents the rows, and the variable j - the columns.

The output looks like:
1	2
3	4
5	6
Exactly as expected.

Now you could do this all on different lines, just like Prog 14 had described, but it’s rather cumbersome and not practical. See:
int arr2D[3][2];
arr2D[0][0] = 1;
arr2D[0][1] = 2;
arr2D[1][0] = 3;
arr2D[1][1] = 4;
arr2D[2][0] = 5;
arr2D[2][1] = 6;

Again, it’s not really practical to load a 2D array on separate lines, just like it isn’t practical to load a 1D array on separate lines. Most commonly, it’s done through a loop (see Prog 15) or one line (described above).

If you didn’t want to load the 2D array on one line, we could have easily done it with a loop as follows:
int arr2D[3][2];
int count = 1;
for (int i = 0; i < sizeof(arr2D) / sizeof(arr2D[i]); i++)
{
    for (int j = 0; j < sizeof(arr2D[i]) / sizeof(int); j++)
    {
        arr2D[i][j] = count;
        count++;
    }
}

This works just the same as doing it on one line, and it’s actually preferred as arrays usually contain many elements, and 2D arrays have many rows and columns.

One thing to understand is that working with 2D arrays - you should always have two sets of double for loops - One set is to load the array, and one set is to print to the screen. The only time you might have one set of double for loops is when you load the 2D array on one line, but we will not be doing that in this project.

Your goal of this project is to print out a times table to the screen. The values inside of the 2D array are the product. The first number in each equation represents the row. The second number will represent the column. Don’t forget to add the x and the = as well. Use the above syntax to print the table to the screen.

Display a 9x9 table as follows:
0x0=0	0x1=0	0x2=0	0x3=0	0x4=0	0x5=0	0x6=0	0x7=0	0x8=0
1x0=0	1x1=1	1x2=2	1x3=3	1x4=4	1x5=5	1x6=6	1x7=7	1x8=8
2x0=0	2x1=2	2x2=4	2x3=6	2x4=8	2x5=10	2x6=12	2x7=14	2x8=16
3x0=0	3x1=3	3x2=6	3x3=9	3x4=12	3x5=15	3x6=18	3x7=21	3x8=24
4x0=0	4x1=4	4x2=8	4x3=12	4x4=16	4x5=20	4x6=24	4x7=28	4x8=32
5x0=0	5x1=5	5x2=10	5x3=15	5x4=20	5x5=25	5x6=30	5x7=35	5x8=40
6x0=0	6x1=6	6x2=12	6x3=18	6x4=24	6x5=30	6x6=36	6x7=42	6x8=48
7x0=0	7x1=7	7x2=14	7x3=21	7x4=28	7x5=35	7x6=42	7x7=49	7x8=56
8x0=0	8x1=8	8x2=16	8x3=24	8x4=32	8x5=40	8x6=48	8x7=56	8x8=64
